
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiler;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CoolParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TokenConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\004\004\000\002\005\004\000\002\005\002\000" +
    "\002\006\014\000\002\006\010\000\002\006\006\000\002" +
    "\006\004\000\002\007\003\000\002\007\005\000\002\007" +
    "\002\000\002\010\005\000\002\011\005\000\002\011\012" +
    "\000\002\011\010\000\002\011\006\000\002\011\011\000" +
    "\002\011\007\000\002\011\005\000\002\011\004\000\002" +
    "\011\007\000\002\011\004\000\002\011\004\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\004\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\014\007\000\002\014\011\000\002\014\007" +
    "\000\002\014\011\000\002\016\003\000\002\016\005\000" +
    "\002\015\010\000\002\012\003\000\002\012\005\000\002" +
    "\012\002\000\002\013\004\000\002\013\005\000\002\013" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\006\003\007\004\010\001\002\000\010\002" +
    "\000\003\007\004\010\001\002\000\010\002\uffff\003\uffff" +
    "\004\uffff\001\002\000\004\002\221\001\002\000\004\043" +
    "\220\001\002\000\004\055\011\001\002\000\006\011\013" +
    "\050\012\001\002\000\010\003\ufff9\051\ufff9\056\ufff9\001" +
    "\002\000\004\055\014\001\002\000\004\050\015\001\002" +
    "\000\010\003\ufff9\051\ufff9\056\ufff9\001\002\000\010\003" +
    "\017\051\022\056\021\001\002\000\004\043\214\001\002" +
    "\000\010\003\ufffa\051\ufffa\056\ufffa\001\002\000\006\044" +
    "\024\045\025\001\002\000\004\043\023\001\002\000\010" +
    "\002\ufffc\003\ufffc\004\ufffc\001\002\000\004\055\207\001" +
    "\002\000\010\042\ufff2\046\ufff2\056\030\001\002\000\006" +
    "\042\033\046\034\001\002\000\006\042\ufff4\046\ufff4\001" +
    "\002\000\004\044\031\001\002\000\004\055\032\001\002" +
    "\000\006\042\ufff1\046\ufff1\001\002\000\004\056\030\001" +
    "\002\000\004\044\035\001\002\000\004\055\036\001\002" +
    "\000\004\050\037\001\002\000\036\007\046\012\055\017" +
    "\040\020\051\024\043\025\047\027\053\041\054\045\056" +
    "\050\041\052\044\053\042\054\045\056\050\001\002\000" +
    "\036\007\046\012\055\017\040\020\051\024\043\025\047" +
    "\027\053\041\054\045\056\050\041\052\044\053\042\054" +
    "\045\056\050\001\002\000\040\003\100\007\046\012\055" +
    "\017\040\020\051\024\043\025\047\027\053\041\054\045" +
    "\056\050\041\052\044\053\042\054\045\056\050\001\002" +
    "\000\052\005\uffda\006\uffda\010\uffda\014\uffda\015\uffda\016" +
    "\uffda\022\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\042\uffda\043\uffda\046\uffda\047" +
    "\uffda\051\uffda\001\002\000\004\055\177\001\002\000\052" +
    "\005\uffd9\006\uffd9\010\uffd9\014\uffd9\015\uffd9\016\uffd9\022" +
    "\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\042\uffd9\043\uffd9\046\uffd9\047\uffd9\051" +
    "\uffd9\001\002\000\052\005\uffd8\006\uffd8\010\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\022\uffd8\030\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\046\uffd8\047\uffd8\051\uffd8\001\002\000\036\007\046\012" +
    "\055\017\040\020\051\024\043\025\047\027\053\041\054" +
    "\045\056\050\041\052\044\053\042\054\045\056\050\001" +
    "\002\000\036\007\046\012\055\017\040\020\051\024\043" +
    "\025\047\027\053\041\054\045\056\050\041\052\044\053" +
    "\042\054\045\056\050\001\002\000\056\005\uffdb\006\uffdb" +
    "\010\uffdb\014\uffdb\015\uffdb\016\uffdb\022\uffdb\026\164\030" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\042\uffdb\043\uffdb\045\163\046\uffdb\047\uffdb\051" +
    "\uffdb\001\002\000\036\007\046\012\055\017\040\020\051" +
    "\024\043\025\047\027\053\041\054\045\056\050\041\052" +
    "\044\053\042\054\045\056\050\001\002\000\026\030\064" +
    "\032\063\033\066\034\060\035\061\036\062\037\071\040" +
    "\065\047\070\051\144\001\002\000\036\007\046\012\055" +
    "\017\040\020\051\024\043\025\047\027\053\041\054\045" +
    "\056\050\041\052\044\053\042\054\045\056\050\001\002" +
    "\000\036\007\046\012\055\017\040\020\051\024\043\025" +
    "\047\027\053\041\054\045\056\050\041\052\044\053\042" +
    "\054\045\056\050\001\002\000\004\056\125\001\002\000" +
    "\036\007\046\012\055\017\040\020\051\024\043\025\047" +
    "\027\053\041\054\045\056\050\041\052\044\053\042\054" +
    "\045\056\050\001\002\000\026\030\064\032\063\033\066" +
    "\034\060\035\061\036\062\037\071\040\065\046\067\047" +
    "\070\001\002\000\036\007\046\012\055\017\040\020\051" +
    "\024\043\025\047\027\053\041\054\045\056\050\041\052" +
    "\044\053\042\054\045\056\050\001\002\000\036\007\046" +
    "\012\055\017\040\020\051\024\043\025\047\027\053\041" +
    "\054\045\056\050\041\052\044\053\042\054\045\056\050" +
    "\001\002\000\036\007\046\012\055\017\040\020\051\024" +
    "\043\025\047\027\053\041\054\045\056\050\041\052\044" +
    "\053\042\054\045\056\050\001\002\000\036\007\046\012" +
    "\055\017\040\020\051\024\043\025\047\027\053\041\054" +
    "\045\056\050\041\052\044\053\042\054\045\056\050\001" +
    "\002\000\036\007\046\012\055\017\040\020\051\024\043" +
    "\025\047\027\053\041\054\045\056\050\041\052\044\053" +
    "\042\054\045\056\050\001\002\000\004\056\110\001\002" +
    "\000\036\007\046\012\055\017\040\020\051\024\043\025" +
    "\047\027\053\041\054\045\056\050\041\052\044\053\042" +
    "\054\045\056\050\001\002\000\052\005\uffdc\006\uffdc\010" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\022\uffdc\030\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042" +
    "\uffdc\043\uffdc\046\uffdc\047\uffdc\051\uffdc\001\002\000\004" +
    "\055\073\001\002\000\036\007\046\012\055\017\040\020" +
    "\051\024\043\025\047\027\053\041\054\045\056\050\041" +
    "\052\044\053\042\054\045\056\050\001\002\000\044\005" +
    "\uffe0\006\uffe0\010\uffe0\014\uffe0\015\uffe0\016\uffe0\022\uffe0" +
    "\032\063\033\066\034\060\035\061\040\065\042\uffe0\043" +
    "\uffe0\046\uffe0\047\070\051\uffe0\001\002\000\004\040\074" +
    "\001\002\000\004\056\075\001\002\000\004\045\076\001" +
    "\002\000\040\003\100\007\046\012\055\017\040\020\051" +
    "\024\043\025\047\027\053\041\054\045\056\050\041\052" +
    "\044\053\042\054\045\056\050\001\002\000\040\007\046" +
    "\012\055\017\040\020\051\024\043\025\047\027\053\041" +
    "\054\045\056\046\104\050\041\052\044\053\042\054\045" +
    "\056\050\001\002\000\004\043\103\001\002\000\026\030" +
    "\064\032\063\033\066\034\060\035\061\036\062\037\071" +
    "\040\065\043\102\047\070\001\002\000\042\007\uffcd\012" +
    "\uffcd\017\uffcd\020\uffcd\024\uffcd\025\uffcd\027\uffcd\041\uffcd" +
    "\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\056\uffcd\001\002\000\042\007\uffcb\012\uffcb\017\uffcb" +
    "\020\uffcb\024\uffcb\025\uffcb\027\uffcb\041\uffcb\045\uffcb\046" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\056\uffcb" +
    "\001\002\000\052\005\uffef\006\uffef\010\uffef\014\uffef\015" +
    "\uffef\016\uffef\022\uffef\030\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef\043\uffef\046" +
    "\uffef\047\uffef\051\uffef\001\002\000\026\030\064\032\063" +
    "\033\066\034\060\035\061\036\062\037\071\040\065\043" +
    "\106\047\070\001\002\000\042\007\uffcc\012\uffcc\017\uffcc" +
    "\020\uffcc\024\uffcc\025\uffcc\027\uffcc\041\uffcc\045\uffcc\046" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\056\uffcc" +
    "\001\002\000\052\005\uffe2\006\uffe2\010\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\022\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\065\042\uffe2\043\uffe2\046" +
    "\uffe2\047\070\051\uffe2\001\002\000\004\045\111\001\002" +
    "\000\042\007\046\012\055\017\040\020\051\024\043\025" +
    "\047\027\053\041\054\042\uffce\045\056\046\uffce\050\041" +
    "\052\044\053\042\054\045\056\050\001\002\000\006\042" +
    "\114\046\115\001\002\000\030\030\064\032\063\033\066" +
    "\034\060\035\061\036\062\037\071\040\065\042\uffd0\046" +
    "\uffd0\047\070\001\002\000\036\007\046\012\055\017\040" +
    "\020\051\024\043\025\047\027\053\041\054\045\056\050" +
    "\041\052\044\053\042\054\045\056\050\001\002\000\052" +
    "\005\uffee\006\uffee\010\uffee\014\uffee\015\uffee\016\uffee\022" +
    "\uffee\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\042\uffee\043\uffee\046\uffee\047\uffee\051" +
    "\uffee\001\002\000\030\030\064\032\063\033\066\034\060" +
    "\035\061\036\062\037\071\040\065\042\uffcf\046\uffcf\047" +
    "\070\001\002\000\044\005\uffdf\006\uffdf\010\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\022\uffdf\032\063\033\066\034\060\035" +
    "\061\040\065\042\uffdf\043\uffdf\046\uffdf\047\070\051\uffdf" +
    "\001\002\000\052\005\uffe5\006\uffe5\010\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\022\uffe5\030\uffe5\032\uffe5\033\066\034\uffe5" +
    "\035\061\036\uffe5\037\uffe5\040\065\042\uffe5\043\uffe5\046" +
    "\uffe5\047\070\051\uffe5\001\002\000\044\005\uffde\006\uffde" +
    "\010\uffde\014\uffde\015\uffde\016\uffde\022\uffde\032\063\033" +
    "\066\034\060\035\061\040\065\042\uffde\043\uffde\046\uffde" +
    "\047\070\051\uffde\001\002\000\052\005\uffe3\006\uffe3\010" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3\030\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\065\042" +
    "\uffe3\043\uffe3\046\uffe3\047\070\051\uffe3\001\002\000\052" +
    "\005\uffe4\006\uffe4\010\uffe4\014\uffe4\015\uffe4\016\uffe4\022" +
    "\uffe4\030\uffe4\032\uffe4\033\066\034\uffe4\035\061\036\uffe4" +
    "\037\uffe4\040\065\042\uffe4\043\uffe4\046\uffe4\047\070\051" +
    "\uffe4\001\002\000\052\005\uffe9\006\uffe9\010\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\022\uffe9\030\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9" +
    "\046\uffe9\047\uffe9\051\uffe9\001\002\000\004\044\126\001" +
    "\002\000\004\055\127\001\002\000\010\010\131\026\132" +
    "\042\130\001\002\000\004\056\125\001\002\000\036\007" +
    "\046\012\055\017\040\020\051\024\043\025\047\027\053" +
    "\041\054\045\056\050\041\052\044\053\042\054\045\056" +
    "\050\001\002\000\036\007\046\012\055\017\040\020\051" +
    "\024\043\025\047\027\053\041\054\045\056\050\041\052" +
    "\044\053\042\054\045\056\050\001\002\000\030\010\134" +
    "\030\064\032\063\033\066\034\060\035\061\036\062\037" +
    "\071\040\065\042\135\047\070\001\002\000\036\007\046" +
    "\012\055\017\040\020\051\024\043\025\047\027\053\041" +
    "\054\045\056\050\041\052\044\053\042\054\045\056\050" +
    "\001\002\000\004\056\125\001\002\000\052\005\uffd4\006" +
    "\uffd4\010\uffd4\014\uffd4\015\uffd4\016\uffd4\022\uffd4\030\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\042\uffd4\043\uffd4\046\uffd4\047\uffd4\051\uffd4\001\002" +
    "\000\052\005\uffd6\006\uffd6\010\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\022\uffd6\030\064\032\063\033\066\034\060\035\061" +
    "\036\062\037\071\040\065\042\uffd6\043\uffd6\046\uffd6\047" +
    "\070\051\uffd6\001\002\000\052\005\uffd7\006\uffd7\010\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\022\uffd7\030\064\032\063\033" +
    "\066\034\060\035\061\036\062\037\071\040\065\042\uffd7" +
    "\043\uffd7\046\uffd7\047\070\051\uffd7\001\002\000\052\005" +
    "\uffd5\006\uffd5\010\uffd5\014\uffd5\015\uffd5\016\uffd5\022\uffd5" +
    "\030\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\001\002\000\052\005\uffe1\006\uffe1\010\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\022\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\065\042\uffe1\043\uffe1\046" +
    "\uffe1\047\070\051\uffe1\001\002\000\052\005\uffdd\006\uffdd" +
    "\010\uffdd\014\uffdd\015\uffdd\016\uffdd\022\uffdd\030\064\032" +
    "\063\033\066\034\060\035\061\036\062\037\071\040\065" +
    "\042\uffdd\043\uffdd\046\uffdd\047\070\051\uffdd\001\002\000" +
    "\004\043\145\001\002\000\010\003\ufff8\051\ufff8\056\ufff8" +
    "\001\002\000\026\022\147\030\064\032\063\033\066\034" +
    "\060\035\061\036\062\037\071\040\065\047\070\001\002" +
    "\000\004\056\152\001\002\000\006\021\161\042\160\001" +
    "\002\000\006\021\uffd3\042\uffd3\001\002\000\004\044\153" +
    "\001\002\000\004\055\154\001\002\000\004\023\155\001" +
    "\002\000\036\007\046\012\055\017\040\020\051\024\043" +
    "\025\047\027\053\041\054\045\056\050\041\052\044\053" +
    "\042\054\045\056\050\001\002\000\026\030\064\032\063" +
    "\033\066\034\060\035\061\036\062\037\071\040\065\043" +
    "\157\047\070\001\002\000\006\021\uffd1\042\uffd1\001\002" +
    "\000\004\056\152\001\002\000\052\005\uffe8\006\uffe8\010" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\022\uffe8\030\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042" +
    "\uffe8\043\uffe8\046\uffe8\047\uffe8\051\uffe8\001\002\000\006" +
    "\021\uffd2\042\uffd2\001\002\000\042\007\046\012\055\017" +
    "\040\020\051\024\043\025\047\027\053\041\054\042\uffce" +
    "\045\056\046\uffce\050\041\052\044\053\042\054\045\056" +
    "\050\001\002\000\036\007\046\012\055\017\040\020\051" +
    "\024\043\025\047\027\053\041\054\045\056\050\041\052" +
    "\044\053\042\054\045\056\050\001\002\000\052\005\ufff0" +
    "\006\ufff0\010\ufff0\014\ufff0\015\ufff0\016\ufff0\022\ufff0\030" +
    "\064\032\063\033\066\034\060\035\061\036\062\037\071" +
    "\040\065\042\ufff0\043\ufff0\046\ufff0\047\070\051\ufff0\001" +
    "\002\000\006\042\114\046\167\001\002\000\052\005\uffed" +
    "\006\uffed\010\uffed\014\uffed\015\uffed\016\uffed\022\uffed\030" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\042\uffed\043\uffed\046\uffed\047\uffed\051\uffed\001" +
    "\002\000\052\005\uffe6\006\uffe6\010\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\022\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\065\042\uffe6\043\uffe6\046\uffe6" +
    "\047\070\051\uffe6\001\002\000\026\016\172\030\064\032" +
    "\063\033\066\034\060\035\061\036\062\037\071\040\065" +
    "\047\070\001\002\000\036\007\046\012\055\017\040\020" +
    "\051\024\043\025\047\027\053\041\054\045\056\050\041" +
    "\052\044\053\042\054\045\056\050\001\002\000\026\005" +
    "\174\030\064\032\063\033\066\034\060\035\061\036\062" +
    "\037\071\040\065\047\070\001\002\000\036\007\046\012" +
    "\055\017\040\020\051\024\043\025\047\027\053\041\054" +
    "\045\056\050\041\052\044\053\042\054\045\056\050\001" +
    "\002\000\026\006\176\030\064\032\063\033\066\034\060" +
    "\035\061\036\062\037\071\040\065\047\070\001\002\000" +
    "\052\005\uffec\006\uffec\010\uffec\014\uffec\015\uffec\016\uffec" +
    "\022\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\042\uffec\043\uffec\046\uffec\047\uffec" +
    "\051\uffec\001\002\000\052\005\uffe7\006\uffe7\010\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\022\uffe7\030\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\043" +
    "\uffe7\046\uffe7\047\uffe7\051\uffe7\001\002\000\040\007\046" +
    "\012\055\017\040\020\051\024\043\025\047\027\053\041" +
    "\054\045\056\050\041\051\201\052\044\053\042\054\045" +
    "\056\050\001\002\000\052\005\uffea\006\uffea\010\uffea\014" +
    "\uffea\015\uffea\016\uffea\022\uffea\030\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043" +
    "\uffea\046\uffea\047\uffea\051\uffea\001\002\000\026\014\203" +
    "\030\064\032\063\033\066\034\060\035\061\036\062\037" +
    "\071\040\065\047\070\001\002\000\036\007\046\012\055" +
    "\017\040\020\051\024\043\025\047\027\053\041\054\045" +
    "\056\050\041\052\044\053\042\054\045\056\050\001\002" +
    "\000\026\015\205\030\064\032\063\033\066\034\060\035" +
    "\061\036\062\037\071\040\065\047\070\001\002\000\052" +
    "\005\uffeb\006\uffeb\010\uffeb\014\uffeb\015\uffeb\016\uffeb\022" +
    "\uffeb\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\042\uffeb\043\uffeb\046\uffeb\047\uffeb\051" +
    "\uffeb\001\002\000\006\042\ufff3\046\ufff3\001\002\000\006" +
    "\026\211\043\210\001\002\000\010\003\ufff6\051\ufff6\056" +
    "\ufff6\001\002\000\036\007\046\012\055\017\040\020\051" +
    "\024\043\025\047\027\053\041\054\045\056\050\041\052" +
    "\044\053\042\054\045\056\050\001\002\000\026\030\064" +
    "\032\063\033\066\034\060\035\061\036\062\037\071\040" +
    "\065\043\213\047\070\001\002\000\010\003\ufff7\051\ufff7" +
    "\056\ufff7\001\002\000\010\003\ufff5\051\ufff5\056\ufff5\001" +
    "\002\000\010\003\017\051\216\056\021\001\002\000\004" +
    "\043\217\001\002\000\010\002\ufffd\003\ufffd\004\ufffd\001" +
    "\002\000\010\002\ufffb\003\ufffb\004\ufffb\001\002\000\004" +
    "\002\001\001\002\000\010\002\ufffe\003\ufffe\004\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\010\002\005\003\003\004\004\001\001\000" +
    "\004\004\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\015\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\025\010\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\051\001\001\000\004\011" +
    "\201\001\001\000\006\011\100\013\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\170\001\001\000\004\011\167\001\001" +
    "\000\002\001\001\000\004\011\145\001\001\000\002\001" +
    "\001\000\004\011\142\001\001\000\004\011\141\001\001" +
    "\000\004\014\123\001\001\000\004\011\056\001\001\000" +
    "\002\001\001\000\004\011\122\001\001\000\004\011\121" +
    "\001\001\000\004\011\120\001\001\000\004\011\117\001" +
    "\001\000\004\011\116\001\001\000\002\001\001\000\004" +
    "\011\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\100\013" +
    "\076\001\001\000\004\011\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\112\012\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\140\001\001" +
    "\000\004\011\137\001\001\000\004\011\132\001\001\000" +
    "\002\001\001\000\004\011\136\001\001\000\004\014\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\150\016\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\112\012\165\001\001\000\004" +
    "\011\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\172\001\001\000\002\001\001\000\004\011\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CoolParser$actions {

 

    int curr_lineno(){
	    return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename(){
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action_part00000000(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= class_list 
            {
              programc RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class_ 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class_ 
            {
              Classes RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_ ::= CLASS TYPEID LBRACE feature_l RBRACE SEMI 
            {
              class_c RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, AbstractTable.idtable.addString("Object"), f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_",2, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_ ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_l RBRACE SEMI 
            {
              class_c RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_",2, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_ ::= error SEMI 
            {
              class_c RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_",2, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // feature_l ::= feature_l feature 
            {
              Features RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Features fs = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fs.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_l",3, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature_l ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature_l",3, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= OBJECTID LPAREN formal_l RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).right;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), n, fl, t, e);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), o, t, e);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno()));
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= error SEMI 
            {
              Feature RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_l ::= formal 
            {
              Formals RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new Formals(curr_lineno()).appendElement(f);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_l",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_l ::= formal_l COMMA formal 
            {
              Formals RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT= fl.appendElement(f);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_l",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_l ::= 
            {
              Formals RESULT =null;
		RESULT = new Formals(curr_lineno());
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal_l",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= OBJECTID COLON TYPEID 
            {
              formalc RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new formalc(curr_lineno(), n, t);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal",6, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new assign(curr_lineno(), o, e);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN expr_l RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		AbstractSymbol T = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol O = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = new static_dispatch(curr_lineno(), e, T, O, el);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr DOT OBJECTID LPAREN expr_lop RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol O = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = new dispatch(curr_lineno(),e,O,el );
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= OBJECTID LPAREN expr_lop RPAREN 
            {
              Expression RESULT =null;
		int Oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol O = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = new dispatch(curr_lineno(),
                                                                                    new object(curr_lineno(),
                                                                                    AbstractTable.idtable.addString("self")),O,el);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = new cond(curr_lineno(),e,e1,e2);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = new loop(curr_lineno(),e,e1);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= LBRACE expr_l RBRACE 
            {
              Expression RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = new block(curr_lineno(), el);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= LET expr_let 
            {
              Expression RESULT =null;
		int eletleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eletright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression elet = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = elet;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= CASE expr OF case_l ESAC 
            {
              Expression RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression E = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = new typcase(curr_lineno(),E,cl);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol T = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new new_(curr_lineno(), T);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new isvoid(curr_lineno(), e);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new plus(curr_lineno(), e1, e2);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new sub(curr_lineno(), e1, e2);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new mul(curr_lineno(), e1, e2);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new divide(curr_lineno(), e1, e2);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new neg(curr_lineno(), e1);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new lt(curr_lineno(), e1,e2);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new leq(curr_lineno(), e1,e2);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new eq(curr_lineno(), e1,e2);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new comp(curr_lineno(), e1);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = e1;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new object(curr_lineno(), o);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new int_const(curr_lineno(), i);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new string_const(curr_lineno(), s);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new bool_const(curr_lineno(), b);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_let ::= OBJECTID COLON TYPEID IN expr 
            {
              Expression RESULT =null;
		int Oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol O = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol T = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new let(curr_lineno(), O, T,                     //let simple
                                                                            new no_expr(curr_lineno()), e);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_let",10, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_let ::= OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              Expression RESULT =null;
		int Oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).right;
		AbstractSymbol O = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol T = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new let(curr_lineno(), O, T, e, e1);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_let",10, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_let ::= OBJECTID COLON TYPEID COMMA expr_let 
            {
              Expression RESULT =null;
		int Oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol O = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol T = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eletleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eletright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression elet = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new let(curr_lineno(), O, T,                     //let compuesto
                                                                             new no_expr(curr_lineno()), elet);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_let",10, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_let ::= OBJECTID COLON TYPEID ASSIGN expr COMMA expr_let 
            {
              Expression RESULT =null;
		int Oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).right;
		AbstractSymbol O = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol T = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eletleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eletright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression elet = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = new let(curr_lineno(), O, T, e, elet);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_let",10, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // case_l ::= case 
            {
              Cases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		branch c = (branch)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = (new Cases(curr_lineno()).appendElement(c));
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case_l",12, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // case_l ::= case_l COMMA case 
            {
              Cases RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		branch c = (branch)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = cl.appendElement(c);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case_l",12, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // case ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              branch RESULT =null;
		int Oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		AbstractSymbol O = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol T = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = new branch(curr_lineno(),O,T,e);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("case",11, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_lop ::= expr 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = (new Expressions(curr_lineno()).appendElement(e));
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_lop",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_lop ::= expr_lop COMMA expr 
            {
              Expressions RESULT =null;
		int elopleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int elopright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expressions elop = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		RESULT = elop.appendElement(e);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_lop",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_lop ::= 
            {
              Expressions RESULT =null;
		RESULT = new Expressions(curr_lineno());
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_lop",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_l ::= expr SEMI 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = (new Expressions(curr_lineno()).appendElement(e));
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_l",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_l ::= expr_l expr SEMI 
            {
              Expressions RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = el.appendElement(e);
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_l",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_l ::= error SEMI 
            {
              Expressions RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr_l",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CoolParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
              return CUP$CoolParser$do_action_part00000000(
                               CUP$CoolParser$act_num,
                               CUP$CoolParser$parser,
                               CUP$CoolParser$stack,
                               CUP$CoolParser$top);
    }
}

}
